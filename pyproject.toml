[tool.poetry]
name = "art-gallery-recommender"
version = "0.1.0"
description = "AI-powered art gallery recommendation system using RAG and vector search - Demo Version"
authors = ["Demo Author <demo@example.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.11"
zenml = { version = "0.74.0", extras = ["server"] }
kfp = "^2.7.0"
google-cloud-aiplatform = "^1.51.0"
google-cloud-tasks = "^2.13.1"
google-cloud-firestore = "^2.16.0"
pymongo = "^4.6.2"
click = "^8.0.1"
loguru = "^0.7.2"
rich = "^13.7.1"
numpy = "^1.26.4"
poethepoet = "0.29.0"
datasets = "^3.0.1"
comet-ml = "^3.40.0"
websockets = "^14.0"
redis = "^6.2.0"

# Digital data ETL
selenium = "^4.21.0"
webdriver-manager = "^4.0.1"
beautifulsoup4 = "^4.12.3"
html2text = "^2024.2.26"
jmespath = "^1.0.1"
chromedriver-autoinstaller = "^0.6.4"

# Feature engineering
qdrant-client = "^1.8.0"
langchain = "^0.2.11"
sentence-transformers = "^3.0.0"

# RAG
langchain-openai = "^0.1.3"
jinja2 = "^3.1.4"
tiktoken = "^0.7.0"
fake-useragent = "^1.5.1"
langchain-community = "^0.2.11"

# Inference
fastapi = ">=0.100,<=0.110"
uvicorn = "^0.30.6"
opik = "^0.2.2"
gspread = "^6.1.4"
google-auth = "^2.38.0"
google-auth-oauthlib = "^1.2.1"
google-auth-httplib2 = "^0.2.0"
rq = "^2.4.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.4.9"
pre-commit = "^3.7.1"
pytest = "^8.2.2"


[tool.poetry.group.aws.dependencies]
sagemaker = ">=2.232.2"
s3fs = ">2022.3.0"
aws-profile-manager = "^0.7.3"
kubernetes = "^30.1.0"
sagemaker-huggingface-inference-toolkit = "^2.4.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# ----------------------------------
# --- Poe the Poet Configuration ---
# ----------------------------------

[tool.poe.tasks]

# Data pipelines
run-digital-data-etl-demo = "poetry run python -m tools.run --run-etl --no-cache --etl-config-filename digital_data_etl_artomo.yaml"
run-feature-engineering-pipeline = "poetry run python -m tools.run --no-cache --run-feature-engineering"
run-end-to-end-data-pipeline = "poetry run python -m tools.run --no-cache --run-end-to-end-data --etl-config-filename digital_data_etl_artomo.yaml"
run-demo-pipeline = "poetry run python -m tools.run --demo-mode --run-etl --etl-config-filename digital_data_etl_artomo.yaml"

#Inference
run-inference-ml-service = "poetry run uvicorn tools.ml_service:app --host 0.0.0.0 --port 8000 --reload"
run-data-service = "poetry run uvicorn tools.data_service:app --host 0.0.0.0 --port 8001 --reload"
call-rag-retrieval-module = "poetry run python -m tools.rag"
run-inference-ml-service-chatgpt = "poetry run python -m tools.chatgpt_service --query 'Recommend me a gallery for a relaxing afternoon' --k 5 --filter area DOWNTOWN"

# Infrastructure
## Local infrastructure
local-docker-infrastructure-up = "docker compose up -d"
local-docker-infrastructure-down = "docker compose stop"
local-zenml-server-down = "poetry run zenml down"
local-infrastructure-up = [
    "local-docker-infrastructure-up ",
    "local-zenml-server-down",
    "local-zenml-server-up",
]
local-infrastructure-down = [
    "local-docker-infrastructure-down",
    "local-zenml-server-down",
]


[tool.poe.tasks.local-zenml-server-up]
control.expr = "sys.platform"

[[tool.poe.tasks.local-zenml-server-up.switch]]
case = "darwin"
env = { OBJC_DISABLE_INITIALIZE_FORK_SAFETY = "YES" }
cmd = "poetry run zenml up"

[[tool.poe.tasks.local-zenml-server-up.switch]]
cmd = "poetry run zenml up"

# Tests
[tool.poe.tasks.test]
cmd = "poetry run pytest tests/"
env = { ENV_FILE = ".env.testing" }